<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jankin&#39;s Blog</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-29T05:03:31.232Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jankin Huang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测试文档</title>
    <link href="http://yoursite.com/2020/10/29/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/"/>
    <id>http://yoursite.com/2020/10/29/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/</id>
    <published>2020-10-29T05:02:39.905Z</published>
    <updated>2020-10-29T05:03:31.232Z</updated>
    
    <content type="html"><![CDATA[<p>test万恶安当</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;test万恶安当&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>1207.独一无二的出现次数</title>
    <link href="http://yoursite.com/2020/10/28/1207-%E7%8B%AC%E4%B8%80%E6%97%A0%E4%BA%8C%E7%9A%84%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0/"/>
    <id>http://yoursite.com/2020/10/28/1207-%E7%8B%AC%E4%B8%80%E6%97%A0%E4%BA%8C%E7%9A%84%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0/</id>
    <published>2020-10-28T11:42:05.000Z</published>
    <updated>2020-10-28T12:07:43.810Z</updated>
    
    <content type="html"><![CDATA[<p>今天，把个人博客的主题换了一个。没有以前那么好看了。但是访问速度提升了不少。以后，有时间的话。我还是打算美化一下，但是毕竟我不是搞前端的，个人博客对我而言就是拿来发发个人感想，记录个人生活的。<br>废话到这里🧑‍🔬，看题目吧～～～</p><a id="more"></a><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。</p><p>如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><blockquote><p>输入：arr = [1,2,2,1,1,3]</p><p>输出：true</p><p>解释：在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。</p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li><p>我看到这个题目，就想到了前一天，类似于桶排序的思路。<br>后面看到给出的数据范围，-1000&lt;= arr[i] &lt;= 1000，我就意识到了直接使用桶排序的思维是解决不了的(数组下标不能为负数)。😅</p></li><li><p>思考一会后，我想到了STL里面的Map（键值对的方式存储数据）。这里的键是一个泛型(这就可以解决直接使用数组，下标不能为负数的情况)，接着在使用桶排序的思想，对map里面的值进行统计。再判断统计数据的值是否大于1,如果大于一这出现了重复次数的数字。🎊🎊🎊🎊🎊(<del>撒花，掌声</del>)</p></li><li><p>时间复杂度约为O(3n),其实一般成为O(n);空间复杂度约为O(2n),也可以称作O(n)。</p></li><li><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">uniqueOccurrences</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr)</span><br><span class="line">        &#123;</span><br><span class="line">            m[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">int</span> aux[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : m)</span><br><span class="line">        &#123;</span><br><span class="line">            aux[i.second]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (aux[i] &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="更优解法"><a href="#更优解法" class="headerlink" title="更优解法"></a>更优解法</h2><p>无独有偶，在题目的评论区也有一个很有意思的解法。👋👋<br>作者是使用了STL库中的Map 和 Set。(当初我也有这想法，只是我对STL库不是用了解，<del>看来需要好好学习STL库呀</del>)</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">uniqueOccurrences</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.<span class="built_in">size</span>();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            m[arr[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;times;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> p:m)</span><br><span class="line">            times.insert(p.second);</span><br><span class="line">        <span class="keyword">return</span> times.<span class="built_in">size</span>()==m.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这段代码的帅气程度快要赶上我了（<del>不要脸</del>）🤞🤞🤞🎊🎊🎊</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天，把个人博客的主题换了一个。没有以前那么好看了。但是访问速度提升了不少。以后，有时间的话。我还是打算美化一下，但是毕竟我不是搞前端的，个人博客对我而言就是拿来发发个人感想，记录个人生活的。&lt;br&gt;废话到这里🧑‍🔬，看题目吧～～～&lt;/p&gt;</summary>
    
    
    
    <category term="修炼之路" scheme="http://yoursite.com/categories/%E4%BF%AE%E7%82%BC%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
    <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>1365.有多少小于当前数字的数字</title>
    <link href="http://yoursite.com/2020/10/26/1365-%E6%9C%89%E5%A4%9A%E5%B0%91%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E6%95%B0%E5%AD%97%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2020/10/26/1365-%E6%9C%89%E5%A4%9A%E5%B0%91%E5%B0%8F%E4%BA%8E%E5%BD%93%E5%89%8D%E6%95%B0%E5%AD%97%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2020-10-26T13:55:35.000Z</published>
    <updated>2020-10-28T12:09:21.143Z</updated>
    
    <content type="html"><![CDATA[<p>有几个月没有写博客，这段时间都是在刷leetcode去啦。今天刷完，才想起来我还有博客。🙃开启每日一题吧！ 加油🦤🦤🦤</p><a id="more"></a><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>给你一个数组 nums，对于其中每个元素 nums[i]，请你统计数组中比它小的所有数字的数目。<br>换而言之，对于每个 nums[i] 你必须计算出有效的 j 的数量，其中 j 满足 j != i 且 nums[j] &lt; nums[i] 。<br>以数组形式返回答案。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><blockquote><p>输入：nums = [8,1,2,2,3]</p><p>输出：[4,0,1,1,3]</p><p>解释：</p><p>对于 nums[0]=8 存在四个比它小的数字：（1，2，2 和 3）。 </p><p>对于 nums[1]=1 不存在比它小的数字。</p><p>对于 nums[2]=2 存在一个比它小的数字：（1）。 </p><p>对于 nums[3]=2 存在一个比它小的数字：（1）。 </p><p>对于 nums[4]=3 存在三个比它小的数字：（1，2 和 2）。</p></blockquote><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul><li>第一想法，是对整个nums数组进行排序.nums[i]的元素就会有i个比它小的元素(包含重复的，不符合题意要求，去要出去重复的)。<br>但是，后来仔细一看题目。发现，这样会打破输入数组的序列。</li><li>第二想法，是通过两个索引遍历整个数组。即每个元素和其他元素做比较，如果nums[i] &gt; nums[j]，则计数加一。比较完成后再存入结果数组中。</li><li>时间复杂度是O(n^2),空间复杂度为O(n);</li><li>代码如下：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">smallerNumbersThanCurrent</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); ++j)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (nums.at(i) &gt; nums.at(j))</span><br><span class="line">                &#123;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.push_back(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="更优解法"><a href="#更优解法" class="headerlink" title="更优解法"></a>更优解法</h2><p>当我提交完代后，我看了一下评论区。<br>可谓是藏龙卧虎呀！！</p><ul><li>整个代码设计的非常巧妙,采用类似于桶排序的思路</li><li>先生成最大数组的大小的长度(题目给出了测试数据集的范围)</li><li>然后，对整个nums数组进行计数</li><li>在计算第i个元素，前i个的数量(arr 数组元素越靠后，对应nums里的元素越大)</li><li>在通过nums数组，获取与nums对应的元素值，存入vector。</li><li>代码如下：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">smallerNumbersThanCurrent</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[<span class="number">101</span>];</span><br><span class="line">        <span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">        <span class="comment">// 初始化计数桶</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : nums) &#123;</span><br><span class="line">            arr[i] ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 累加处理计数桶，使得 arr[i] 表示比 i 小的数字的个数</span></span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i ++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            arr[i] = cnt;</span><br><span class="line">            cnt += temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line">        <span class="comment">// 遍历 nums，取出对应桶 arr[i] 里的结果即可</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">            ret.push_back(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>可以基于这个代码进行下一步的优化，但是时间复杂度大致还是O(n)级别。<br>方法是提前结束循环。😝</li></ul><p>今天的每日一题就到这里吧🎊</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有几个月没有写博客，这段时间都是在刷leetcode去啦。今天刷完，才想起来我还有博客。🙃开启每日一题吧！ 加油🦤🦤🦤&lt;/p&gt;</summary>
    
    
    
    <category term="修炼之路" scheme="http://yoursite.com/categories/%E4%BF%AE%E7%82%BC%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
    <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Konsole无法启动</title>
    <link href="http://yoursite.com/2020/08/30/Konsole%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/"/>
    <id>http://yoursite.com/2020/08/30/Konsole%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/</id>
    <published>2020-08-30T03:11:45.000Z</published>
    <updated>2020-10-26T14:32:37.098Z</updated>
    
    <content type="html"><![CDATA[<p>前几天，想实现打开终端自动显示系统相关信息。<br>于是我就在修改了 Konsole Profile 的 Command 加入了一个命令。<br>结果，konsole都打不开啦。</p><a id="more"></a><p>这就非常尴尬啦，需要改回Profile 需要先打开konsole 才行呀😝。<br>可是，现在就是打不开。</p><p>纵然寻他千百度 打开百度已掉进黑灯瞎火处。<br>这就是我不喜欢用百度的原因，啥都查不到。(啥都没有也敢叫百度呀！！)</p><p>“一切皆文件”,这条Linux哲学。在我脑海中呈现🤔。<br>我顿悟，我找到Konsole的配置文件，不久可以改回来啦吗？<br>根本就不需要图形界面的Profile呀！！</p><h2 id="Konsole-profile-配置文件"><a href="#Konsole-profile-配置文件" class="headerlink" title="Konsole profile 配置文件"></a>Konsole profile 配置文件</h2><ul><li>所在路径 ~/.locla/share/konsole/*.profile</li><li>修改Command 项里面参数(记得保存哦)</li><li>点击Konsole图标，就可以启动成功<br>这就ok啦</li></ul><blockquote><p>Note: 到这里Konsole 不能启动的问题就修复，下面完成我未尽的事业🤪</p></blockquote><h2 id="未尽事业🤣"><a href="#未尽事业🤣" class="headerlink" title="未尽事业🤣"></a>未尽事业🤣</h2><h3 id="新建一个文件"><a href="#新建一个文件" class="headerlink" title="新建一个文件"></a>新建一个文件</h3><ul><li>最后是.开头的隐藏文件</li><li>这个文件用来存放，终端启动需要自动执行的命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch .neofetchShow</span><br></pre></td></tr></table></figure></li></ul><h3 id="写入命令"><a href="#写入命令" class="headerlink" title="写入命令"></a>写入命令</h3><ul><li>把需要自动执行的命令，写入到文件中<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'neofetch'</span> &gt;&gt; .neofetchShow</span><br></pre></td></tr></table></figure><blockquote><p>neofetch 命令需要自己安装</p></blockquote></li></ul><h3 id="修改shell配置文件"><a href="#修改shell配置文件" class="headerlink" title="修改shell配置文件"></a>修改shell配置文件</h3><ul><li>默认shell 的配置文件为～/.bashrc</li><li>zsh配置文件为~/.zshrc</li><li>将文件路径写入配置文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.neofetchShow</span><br></pre></td></tr></table></figure></li><li>保存配置文件</li></ul><blockquote><p>Note: 以上上操作都在home目录下完成，如果配置失败了，请核对路径和需要启动的命令时候可以执行</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;前几天，想实现打开终端自动显示系统相关信息。&lt;br&gt;于是我就在修改了 Konsole Profile 的 Command 加入了一个命令。&lt;br&gt;结果，konsole都打不开啦。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux之路" scheme="http://yoursite.com/categories/Linux%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="Arch" scheme="http://yoursite.com/tags/Arch/"/>
    
    <category term="Manjaro" scheme="http://yoursite.com/tags/Manjaro/"/>
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>永别ActiveWindowControl</title>
    <link href="http://yoursite.com/2020/08/20/%E6%B0%B8%E5%88%ABActiveWindowControl/"/>
    <id>http://yoursite.com/2020/08/20/%E6%B0%B8%E5%88%ABActiveWindowControl/</id>
    <published>2020-08-20T06:22:51.000Z</published>
    <updated>2020-10-26T14:33:18.382Z</updated>
    
    <content type="html"><![CDATA[<p>当初刚刚接触Ubuntu的时候,我就很喜欢Unity桌面的全局菜单整合功能,🎊<br>可以把窗口标题和全局菜单整合为一体.<br>这样就可以节省一行显示标题的空间.</p><a id="more"></a><p>可是后来,Ubuntu放弃啦Unity桌面,搞了Gnome桌面.👎<br>当初,其他衍生版搞Gnome桌面,他特立独行搞Unity现在有放弃.<br>这是我不喜欢Ubuntu的其中原因之一.</p><p>后来,在我的老电脑上,我已经转入了Arch魔教.<br>我是非常喜欢Arch的包管理器.这是非常Amazing.🤪</p><p>不过,现在在我的新电脑(Lenovo 小新13 Pro)已经使用Manjaro一段时间,<br>Manjaro是基于Arch开发的,Arch的一些优势基本上都有.<br>主要还是安装系统过程中,简便啦很多.</p><p>我使用的KDE桌面,是已经预装了全局菜单.不过还是不能实现Unity桌面的风格.<br>后来知道active Window Control 插件,可以实现这个功能,</p><p>我个人觉得这个东西不太友好,我几次配置都出现了桌面黑黑的(我也不知道是啥情况.).<br>而且,对于Window Title显示不太好,因为Title长度不一致,所以显示就有一些问题.<br>有强迫症的我,就能难忍受啦.😅</p><p>直到遇到了你,由<a href="https://github.com/psifidotos" target="_blank" rel="noopener">psifidotos</a>开发的applet-window系列插件🤪<br>另外,提一下.这个位开发者处理Github issue 的速度是很快的.<br>由于我的无知(我对系统不熟悉),在Windos title 这个仓库中Open issue .没过多久他就回复我,<br>而且,非常友好的给出了解决我问题的方式.</p><h2 id="如何实现Unity桌面风格"><a href="#如何实现Unity桌面风格" class="headerlink" title="如何实现Unity桌面风格"></a>如何实现Unity桌面风格</h2><p>需要安装如下插件,目前这些都不在AUR仓库中,需要自己下载编译安装.</p><ul><li>applet-window-title</li><li>applet-window-buttons</li><li>applet-window-appmenu</li></ul><blockquote><p>Note: 编译过程,系统需要有cmake 和 extra-cmake-modules 环境 .  这两个可以直接安装.</p></blockquote><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><h3 id="安装applet-window-title"><a href="#安装applet-window-title" class="headerlink" title="安装applet-window-title"></a>安装applet-window-title</h3><ul><li><p>克隆仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/psifidotos/applet-window-title.git</span><br></pre></td></tr></table></figure><p>该插件使用QML编写,可以直接装入.不需要编译</p></li><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> applet-window-title</span><br><span class="line">plasmapkg2 -i .</span><br></pre></td></tr></table></figure></li></ul><p>至此,安装完成🤞</p><h3 id="安装applet-window-buttons"><a href="#安装applet-window-buttons" class="headerlink" title="安装applet-window-buttons"></a>安装applet-window-buttons</h3><ul><li>克隆仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/psifidotos/applet-window-buttons.git</span><br></pre></td></tr></table></figure></li><li>编译安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> applet-window-buttons</span><br><span class="line">sh install.sh</span><br></pre></td></tr></table></figure>shell 脚本需要知道完成,编译和安装工作.</li></ul><blockquote><p>Note: 一定要安装cmake和 extra-cmake-modules . 不然会无法编译</p></blockquote><p>至此,安装完成🤞</p><h3 id="安装applet-windows-appmenu"><a href="#安装applet-windows-appmenu" class="headerlink" title="安装applet-windows-appmenu"></a>安装applet-windows-appmenu</h3><p>如果,系统已经预装了,全局菜单. 这个可以不安装.<br>我就是使用系统预装的全局菜单的😝</p><p>如果没有就看下吧!!</p><ul><li>克隆仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/psifidotos/applet-window-appmenu.git</span><br></pre></td></tr></table></figure></li><li>编译安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> applet-window-appmenu</span><br><span class="line">sh install.sh</span><br></pre></td></tr></table></figure>同样,shell会搞定一切.开发者还是蛮贴心的哈<del>~</del>👋</li></ul><p>到这就全部安装完成啦.</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>安装完成,就可以愉快到需要的地方.添加插件啦.<br><img src="/img/min.png" alt="效果"><br><img src="/img/max.png" alt="效果"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;当初刚刚接触Ubuntu的时候,我就很喜欢Unity桌面的全局菜单整合功能,🎊&lt;br&gt;可以把窗口标题和全局菜单整合为一体.&lt;br&gt;这样就可以节省一行显示标题的空间.&lt;/p&gt;</summary>
    
    
    
    <category term="Linux之路" scheme="http://yoursite.com/categories/Linux%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="Arch" scheme="http://yoursite.com/tags/Arch/"/>
    
    <category term="Manjaro" scheme="http://yoursite.com/tags/Manjaro/"/>
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装VirtualBox</title>
    <link href="http://yoursite.com/2020/08/14/Linux%E5%AE%89%E8%A3%85VirtualBox/"/>
    <id>http://yoursite.com/2020/08/14/Linux%E5%AE%89%E8%A3%85VirtualBox/</id>
    <published>2020-08-14T08:47:55.000Z</published>
    <updated>2020-10-26T14:32:40.782Z</updated>
    
    <content type="html"><![CDATA[<p>昨天，我下载好了kali镜像后.<br>今天,反手就是一个条命令吧VirtualBox安装好了,<br>结果可想而知🤣</p><a id="more"></a><p>安装的VirtualBox可以运行,但是就是不能启动里面的虚拟系统.<br>这就很令我发愁,本来因为是BIOS没有开启虚拟化.<br>经过排查并不是这个原因.🤔<br>后来才知道,需要安装对应内核版本的安装包,才行</p><h2 id="确定Linux内核版本"><a href="#确定Linux内核版本" class="headerlink" title="确定Linux内核版本"></a>确定Linux内核版本</h2><ul><li>安装对应内核版本的安装,需要查询但前实习使用的内核.</li><li>使用uname -r 命令即可查询<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo uname -r</span><br><span class="line">5.6.19-2-MANJARO</span><br></pre></td></tr></table></figure>表示需要安装linux内核版本为5.6</li></ul><h2 id="安装VirtualBox"><a href="#安装VirtualBox" class="headerlink" title="安装VirtualBox"></a>安装VirtualBox</h2><p>需要安装VirtualBox和扩展包,以及内核模块</p><ul><li>安装VirtualBox<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S virtualbox</span><br></pre></td></tr></table></figure></li><li>安装VirtualBox扩展包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S virtualbox-ext-oracle</span><br></pre></td></tr></table></figure></li><li>安装内核模块<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pacman -S linux56-virtualbox-host-modules</span><br></pre></td></tr></table></figure><blockquote><p>Note: 安装内核模块,一定要和系统内核是一致的版本.不然可能无法启动.</p></blockquote></li></ul><h2 id="载入vboxdr模块"><a href="#载入vboxdr模块" class="headerlink" title="载入vboxdr模块"></a>载入vboxdr模块</h2><ul><li>重启系统模块会自动载入.</li><li>手动使用命令载入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo modprobe vboxdrv</span><br></pre></td></tr></table></figure>如果是其他衍生系统,大致安装步骤也和这个差不多.如果是初学者,注意包管理器的不同哦.🤞🤞🤞</li></ul><p>完成这些,就可以在Linux下面愉快的玩耍啦.🎊🎊🎊</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天，我下载好了kali镜像后.&lt;br&gt;今天,反手就是一个条命令吧VirtualBox安装好了,&lt;br&gt;结果可想而知🤣&lt;/p&gt;</summary>
    
    
    
    <category term="Linux之路" scheme="http://yoursite.com/categories/Linux%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="Arch" scheme="http://yoursite.com/tags/Arch/"/>
    
    <category term="Manjaro" scheme="http://yoursite.com/tags/Manjaro/"/>
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>qBittorrent下载加速</title>
    <link href="http://yoursite.com/2020/08/13/qBittorrent%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F/"/>
    <id>http://yoursite.com/2020/08/13/qBittorrent%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F/</id>
    <published>2020-08-13T03:10:05.000Z</published>
    <updated>2020-10-26T14:32:57.732Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 下面如何下载Bittorrent的资源呢🤔🤔？？<br>如果是在Windows下面,迅雷🐦一般是第一选择．</p><a id="more"></a><p>今天，我试图下载Kali Linux 镜像的时候，发现官方提供了，BitTorrent下载方式．<br>我就打算在我的Linux 下面尝试一下．结果下载速度非常快😝</p><h2 id="安装qBittorrent"><a href="#安装qBittorrent" class="headerlink" title="安装qBittorrent"></a>安装qBittorrent</h2><p>qBittorrent是一个跨平台的自由BitTorrent客户端，其图形用户界面是由Qt所写成的．</p><blockquote><p>下载链接：<a href="https://www.qbittorrent.org/download.php" target="_blank" rel="noopener">https://www.qbittorrent.org/download.php</a></p></blockquote><p>等待下载完成后，就可以安装啦．</p><h3 id="Arch系列"><a href="#Arch系列" class="headerlink" title="Arch系列"></a>Arch系列</h3><p>如果是Arch Linux ，或者是基于Arch Linux 的系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S qbittorrent</span><br></pre></td></tr></table></figure><p>可以使用上述命令直接安装．</p><h2 id="加入Tracker-服务器"><a href="#加入Tracker-服务器" class="headerlink" title="加入Tracker 服务器"></a>加入Tracker 服务器</h2><p>Tracker服务器，主要目的是为了，提升下载速度.</p><p>由于tracker对BT下载起到客户端协调和调控的重要作用，所以一旦被封锁会严重影响BT下载，如2009年12月，中华人民共和国广电总局对BTchina一系列的tracker进行打击，因此也促使新BT客户端支持DHT网络实现无中心tracker，分布式资源分享的影响<br>需要了解更多Tracker服务器，可以自行搜索．</p><h2 id="qBittorrent-添加tracker服务器"><a href="#qBittorrent-添加tracker服务器" class="headerlink" title="qBittorrent 添加tracker服务器"></a>qBittorrent 添加tracker服务器</h2><p><a href="/img/tra.png">添加tracker服务器</a></p><ul><li>点击Preferences</li><li>找到Bittorent选项</li><li>勾选　automatically add thes trackers to new downloads 选项</li><li>粘贴tracker服务器列表，即可点击apply</li></ul><blockquote><p>Note: qBittorrent添加完成tracker服务器后需要，重新启动软件．</p></blockquote><h2 id="tracker服务器列表"><a href="#tracker服务器列表" class="headerlink" title="tracker服务器列表"></a>tracker服务器列表</h2><ul><li>Best Tracker list:<blockquote><p>　<a href="https://trackerslist.com/best.txt" target="_blank" rel="noopener">https://trackerslist.com/best.txt</a></p></blockquote></li><li>All Tracker list:<blockquote><p><a href="https://trackerslist.com/all.txt" target="_blank" rel="noopener">https://trackerslist.com/all.txt</a></p></blockquote></li><li>Http(s) Tracker list:<blockquote><p><a href="https://trackerslist.com/http.txt" target="_blank" rel="noopener">https://trackerslist.com/http.txt</a></p></blockquote></li></ul><p>这些是我日程使用的Tracker服务器列表，这个仓库列表，已有人发布到github仓库中．<br>这里我就不给出仓库连接了，在我的收藏的仓库中可以找到😝</p><p>关于Bittorent 就分享到这里吧，DHT的中文全称是分布式哈希表(distributed has table 的缩写)，这可以避免中心tracker服务器的不能工作而导致这个系统的瘫痪．是一些天才的杰作．</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linux 下面如何下载Bittorrent的资源呢🤔🤔？？&lt;br&gt;如果是在Windows下面,迅雷🐦一般是第一选择．&lt;/p&gt;</summary>
    
    
    
    <category term="Linux之路" scheme="http://yoursite.com/categories/Linux%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="Arch" scheme="http://yoursite.com/tags/Arch/"/>
    
    <category term="Manjaro" scheme="http://yoursite.com/tags/Manjaro/"/>
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Shell之处理命名参数</title>
    <link href="http://yoursite.com/2020/08/09/Shell%E4%B9%8B%E5%A4%84%E7%90%86%E5%91%BD%E5%90%8D%E5%8F%82%E6%95%B0/"/>
    <id>http://yoursite.com/2020/08/09/Shell%E4%B9%8B%E5%A4%84%E7%90%86%E5%91%BD%E5%90%8D%E5%8F%82%E6%95%B0/</id>
    <published>2020-08-09T02:51:43.000Z</published>
    <updated>2020-10-26T14:33:03.102Z</updated>
    
    <content type="html"><![CDATA[<p>今天练习了一下shell脚本，之前简单的学习啦shell脚本的语法。😅<br>刷了<a href="https://www.hackerrank.com/dashboard" target="_blank" rel="noopener">HackerRank</a>的题目以后，发现还是不能很好的驾驭shell这把神剑。</p><a id="more"></a><p>于是，我决定闭关修炼😝<br>修炼过程中，我发现啦很多武林绝学🌻。令我感到非常的Amazing。<br>下面就来看看吧！！！</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">deploy=<span class="literal">false</span></span><br><span class="line">uglify=<span class="literal">false</span></span><br><span class="line"><span class="keyword">while</span>(( <span class="variable">$#</span> &gt; 1 ));</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">    --deploy) deploy=<span class="string">"<span class="variable">$2</span>"</span>;;</span><br><span class="line">    --uglify) uglify=<span class="string">"<span class="variable">$2</span>"</span>;;</span><br><span class="line">    *) <span class="built_in">break</span>;</span><br><span class="line">   <span class="keyword">esac</span>; <span class="built_in">shift</span> 2</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$deploy</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">"will deploy... deploy = <span class="variable">$deploy</span>"</span></span><br><span class="line"><span class="variable">$uglify</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">"will uglify... uglify = <span class="variable">$uglify</span>"</span></span><br></pre></td></tr></table></figure><blockquote><p>Note: 最后两行，与&amp;&amp;的运算方式有关</p></blockquote><ul><li>$# 参数个数<h2 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash script.sh --deploy <span class="literal">true</span> --uglify <span class="literal">false</span></span><br></pre></td></tr></table></figure>true 和fasle 为输入值<h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td>$0</td><td>当前脚本的文件名</td></tr><tr><td>$n</td><td>传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例</td></tr><tr><td>$#</td><td>传递给脚本或函数的参数个数。</td></tr><tr><td>$*</td><td>传递给脚本或函数的所有参数。</td></tr><tr><td>$@</td><td>传递给脚本或函数的所有参数。被双引号(“ “)包含时，与 $* 稍有不同</td></tr><tr><td>$?</td><td>上个命令的退出状态，或函数的返回值。</td></tr><tr><td>$$</td><td>当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</td></tr></tbody></table></li></ul><h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="$@和$*的区别"></a>$@和$*的区别</h2><ul><li>不被双引号(“ “)包含时，都以”$1” “$2” … “$n” 的形式输出所有参数。</li><li>被双引号(“ “)包含时，</li><li><ul><li>“$*” 会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；</li></ul></li><li><ul><li>“$@” 会将各个参数分开，以”$1” “$2” … “$n” 的形式输出所有参数(带换行输出)。</li></ul></li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"print each param from \$*"</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> $*</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"print each param from \$@"</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"print each param from \"\$*\""</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="string">"$*"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"print each param from \"\$@\""</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$var</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>今天，就先到这里吧!! </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天练习了一下shell脚本，之前简单的学习啦shell脚本的语法。😅&lt;br&gt;刷了&lt;a href=&quot;https://www.hackerrank.com/dashboard&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HackerRank&lt;/a&gt;的题目以后，发现还是不能很好的驾驭shell这把神剑。&lt;/p&gt;</summary>
    
    
    
    <category term="脚本" scheme="http://yoursite.com/categories/%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="Arch" scheme="http://yoursite.com/tags/Arch/"/>
    
    <category term="Manjaro" scheme="http://yoursite.com/tags/Manjaro/"/>
    
    <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>List和Tuple</title>
    <link href="http://yoursite.com/2020/08/02/List%E5%92%8CTuple/"/>
    <id>http://yoursite.com/2020/08/02/List%E5%92%8CTuple/</id>
    <published>2020-08-02T02:05:56.000Z</published>
    <updated>2020-10-26T14:32:45.595Z</updated>
    
    <content type="html"><![CDATA[<p>之前写了，学习了基本数据类型。今天就该学习List了</p><a id="more"></a><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><p>List是Python 内置的一种数据类型。<br>他是一种有序的集合，可以随时添加和删除其中的元素</p><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = [<span class="string">'Linux'</span>,<span class="string">'arch'</span>,<span class="string">'kernel'</span>,<span class="string">'manjaro'</span>]</span><br></pre></td></tr></table></figure><ul><li>列表元素不一定是相同的元素。</li><li>使用print可以直接打印。</li></ul><h3 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h3><ul><li>通过索引来访问<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(name[<span class="number">2</span>])</span><br></pre></td></tr></table></figure></li><li>通过方括号的形式来截取列表中的元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(name[<span class="number">0</span>:<span class="number">2</span>]) <span class="comment">#左闭右开</span></span><br></pre></td></tr></table></figure></li><li>左索引缺省为0<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(name[:<span class="number">2</span>])</span><br></pre></td></tr></table></figure></li><li>右索引缺省为列表最后一个<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(name[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure></li></ul><h3 id="更新元素"><a href="#更新元素" class="headerlink" title="更新元素"></a>更新元素</h3><p>对索引直接赋值，就可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name[<span class="number">2</span>]=<span class="string">'archkernel'</span></span><br></pre></td></tr></table></figure><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p>使用append()方法来添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name.append(<span class="string">'ubuntu'</span>) <span class="comment">#元素添加到列表末尾</span></span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>使用del语句来删除列表的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> name[<span class="number">2</span>] <span class="comment">#删除位置的以后索引的元素自动先前填充</span></span><br></pre></td></tr></table></figure><h3 id="List运算符"><a href="#List运算符" class="headerlink" title="List运算符"></a>List运算符</h3><table><thead><tr><th>Python 表达式</th><th align="left">结果</th><th>描述</th></tr></thead><tbody><tr><td>len([1, 2, 3])</td><td align="left">3</td><td>计算元素个数</td></tr><tr><td>[1, 2, 3] + [4, 5, 6]</td><td align="left">[1, 2, 3, 4, 5, 6]</td><td>组合</td></tr><tr><td>[‘Hi!’] * 4</td><td align="left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>复制</td></tr><tr><td>3 in [1, 2, 3]</td><td align="left">True</td><td>元素是否存在于列表中</td></tr><tr><td>for x in [1, 2, 3]: print x,</td><td align="left">1 2 3</td><td>迭代</td></tr></tbody></table><h3 id="List函数"><a href="#List函数" class="headerlink" title="List函数"></a>List函数</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>max(list)</td><td>返回列表元素最大值</td></tr><tr><td>min(list)</td><td>返回列表元素最小值</td></tr><tr><td>list(seq)</td><td>将元组转换为列表</td></tr><tr><td>list.append(obj)</td><td>在列表末尾添加新的对象</td></tr><tr><td>list.count(obj)</td><td>统计某个元素在列表中出现的次数</td></tr><tr><td>list.extend(seq)</td><td>在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td>list.index(obj)</td><td>从列表中找出某个值第一个匹配项的索引位置”</td></tr><tr><td>list.insert(index, obj)</td><td>将对象插入列表</td></tr><tr><td>list.pop(obj=list[-1])</td><td>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td>list.remove(obj)</td><td>移除列表中的一个元素（参数是列表中元素），并且不返回任何值}</td></tr><tr><td>list.reverse()</td><td>反向列表中元素</td></tr><tr><td>list.sort([func])</td><td>对原列表进行排序</td></tr></tbody></table><h2 id="Tuple-元组"><a href="#Tuple-元组" class="headerlink" title="Tuple (元组)"></a>Tuple (元组)</h2><p>tuple一旦初始化就不能修改。</p><h3 id="创建元组"><a href="#创建元组" class="headerlink" title="创建元组"></a>创建元组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple=(<span class="string">'Linux'</span>,<span class="string">'arch'</span>,<span class="string">'kernel'</span>,<span class="string">'manjaro'</span>)</span><br></pre></td></tr></table></figure><p>创建空元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tuple=()</span><br></pre></td></tr></table></figure><blockquote><p>Note: 创建元组中只包含一个元素时，需要在元素后面添加逗号。避免产生歧义。</p></blockquote><h3 id="访问元组"><a href="#访问元组" class="headerlink" title="访问元组"></a>访问元组</h3><p>访问方式和List一样👋</p><h3 id="修改元组"><a href="#修改元组" class="headerlink" title="修改元组"></a>修改元组</h3><p>可以对元组进行连接组合，而打到修改元组内容的🤗。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">123</span>,<span class="number">456</span>]</span><br><span class="line">tuple1=(<span class="string">'两点水'</span>,<span class="string">'twowater'</span>,<span class="string">'liangdianshui'</span>,list1)</span><br><span class="line">print(tuple1)</span><br><span class="line">list1[<span class="number">0</span>]=<span class="number">789</span></span><br><span class="line">list1[<span class="number">1</span>]=<span class="number">100</span></span><br><span class="line">print(tuple1)</span><br></pre></td></tr></table></figure><p>这样就可通过修改List，而达到修改Tuple的目的。</p><blockquote><p>Note: Tuple一开始指向list，修改list的内容，并没有改变别指向。</p></blockquote><h3 id="删除元组"><a href="#删除元组" class="headerlink" title="删除元组"></a>删除元组</h3><p>与List一致，使用del语句。但是不能单独删除单个元素，因为不可变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> tuple</span><br></pre></td></tr></table></figure><h3 id="元组运算符"><a href="#元组运算符" class="headerlink" title="元组运算符"></a>元组运算符</h3><p>元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</p><table><thead><tr><th>Python表达式</th><th>结果</th><th>描述</th></tr></thead><tbody><tr><td>len((1, 2, 3))</td><td>3</td><td>计算元素个数</td></tr><tr><td>(1, 2, 3) + (4, 5, 6)</td><td>(1, 2, 3, 4, 5, 6)</td><td>连接</td></tr><tr><td>(‘Hi!’,) * 4</td><td>(‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’)</td><td>复制</td></tr><tr><td>3 in (1, 2, 3)</td><td>True</td><td>元素是否存在</td></tr><tr><td>for x in (1, 2, 3): print(x)</td><td>1 2 3</td><td>迭代</td></tr></tbody></table><h3 id="元组内置函数"><a href="#元组内置函数" class="headerlink" title="元组内置函数"></a>元组内置函数</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>len(tuple)</td><td>计算元组元素个数</td></tr><tr><td>max(tuple)</td><td>返回元组中元素最大值</td></tr><tr><td>min(tuple)</td><td>返回元组中元素最小值</td></tr><tr><td>tuple(seq)</td><td>将列表转换为元组</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前写了，学习了基本数据类型。今天就该学习List了&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
    <category term="编程语言" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="脚本" scheme="http://yoursite.com/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro连接隐藏WIFI</title>
    <link href="http://yoursite.com/2020/07/30/Manjaro%E8%BF%9E%E6%8E%A5%E9%9A%90%E8%97%8FWIFI/"/>
    <id>http://yoursite.com/2020/07/30/Manjaro%E8%BF%9E%E6%8E%A5%E9%9A%90%E8%97%8FWIFI/</id>
    <published>2020-07-30T14:17:57.000Z</published>
    <updated>2020-10-26T14:32:49.182Z</updated>
    
    <content type="html"><![CDATA[<p>今天远行，但是高铁晚点啦几分钟。我又很饿🤗。我就非常的不开心。<br>现在我已经到达了，目的地。<br>于是乎我开启了我的电脑，想要上上网～～～</p><a id="more"></a><p>可是wifi是隐藏的，也就是说没有广播SSID。这对于我来说，是一个大问题。<br>因为我以前就遇到啦这个问题，但是我利用啦曲线救国。我就直接改了路由器的设置，开启啦SSID广播。<br>不过，这个我懒得捣腾啦。🤣</p><p>我决定好好，看看官方的Wiki了。<br>巧了官方还针给出啦，连接隐藏wifi的方案！！！<br>不过，填写SSID的时候需要加入单引号，才能连接成功，不然会提示SSID找不到</p><blockquote><p><a href="https://wiki.archlinux.org/index.php/NetworkManager_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/NetworkManager_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p></blockquote><p>官方wiki都很详细，我就不多说啦。我只记录官方没有说明的一些细节部分。🤪<br>今天就到这里吧！！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天远行，但是高铁晚点啦几分钟。我又很饿🤗。我就非常的不开心。&lt;br&gt;现在我已经到达了，目的地。&lt;br&gt;于是乎我开启了我的电脑，想要上上网～～～&lt;/p&gt;</summary>
    
    
    
    <category term="Linux之路" scheme="http://yoursite.com/categories/Linux%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="Arch" scheme="http://yoursite.com/tags/Arch/"/>
    
    <category term="Manjaro" scheme="http://yoursite.com/tags/Manjaro/"/>
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>备考过程及我的方法</title>
    <link href="http://yoursite.com/2020/07/28/%E5%A4%87%E8%80%83%E8%BF%87%E7%A8%8B%E5%8F%8A%E6%88%91%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/07/28/%E5%A4%87%E8%80%83%E8%BF%87%E7%A8%8B%E5%8F%8A%E6%88%91%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-07-27T23:55:49.000Z</published>
    <updated>2020-10-26T14:33:13.465Z</updated>
    
    <content type="html"><![CDATA[<p>考试也结束啦，结果还不错🤪。<br>下面我就记录分享一下，我以往的学习方式及备考过程。</p><a id="more"></a><h1 id="我的自学观点"><a href="#我的自学观点" class="headerlink" title="我的自学观点"></a>我的自学观点</h1><h2 id="我是一个方法论者"><a href="#我是一个方法论者" class="headerlink" title="我是一个方法论者"></a>我是一个方法论者</h2><p>面对一切东西都有其方式与方式，无论是与人打交道，还是学习一个新的工具，或者是谈恋爱都有方法。<br>相比于努力，我更喜欢高效率。当然，我也不是那种非常勤奋的人🙈。<br>在我面对一个新的事物，并学习它的时候。我通常是先去了解大体的框架，然后基于这个框架逐步去细化，直至每一个需要学习的知识点都掌握。<br>这是我以往的学习方法，看上去是非常像软件工程中逐步求精的过程。</p><h2 id="他人建议的参考"><a href="#他人建议的参考" class="headerlink" title="他人建议的参考"></a>他人建议的参考</h2><p>在自学过程中，常常身边会有一群学习的伙伴，或者是老师。他们往往会提供一些建议与学习的资料。</p><h3 id="如何对待这些人的建议的呢？"><a href="#如何对待这些人的建议的呢？" class="headerlink" title="如何对待这些人的建议的呢？"></a>如何对待这些人的建议的呢？</h3><p>对于给我建议的人，我必然是表示感谢。但是这并不意味着需要完全接受他们的建议，而摒弃原有自己的学习方式与计划。</p><p>比如： 有个同学推荐你去做一套英语试卷，他说他就是写完这套试卷就把英语成绩提升去。<br>他就推荐你去做这套试卷。然后你很都不能写出来。而且最后英语成绩也没有提高。反而是浪费啦自己的时间。<br>原因就是两个对英语的掌握情况不一致导致的。<br>一个人英语刚刚入门，另一词汇量足够，语法不太好。<br>使用同一个学习方式，同一个学习进度。必然是得不到两人都能把英语成绩提高的目标</p><h2 id="自学阶段的定位"><a href="#自学阶段的定位" class="headerlink" title="自学阶段的定位"></a>自学阶段的定位</h2><p>要在实际中回答上一个问题，在自学过程中自我定位是必然的。<br>当自己知道了，自己目前自学所在的阶段。才能搞清楚哪些内容是需要自己目前学的，哪些是后阶段要学的，哪些是习题是目前需要做的。</p><h3 id="如何定位"><a href="#如何定位" class="headerlink" title="如何定位"></a>如何定位</h3><p>想要确定自己处于哪一个自学阶段，就需要对整个自学过程的框架有大体的认识(这就是我为什么先会去了解大体的框架)。</p><p>大体框架知道啦，处于哪一个学习阶段就很简单啦。<br>后续就可对该阶段进行学习，其学习方法可以当做学一个新的东西，继续套用上述方式。</p><p>比如：我现在的目标是学习英语。<br>我发现英语就是由词汇和语法组成。且需要一定词汇才能学习语法。<br>基于以上这个框架。我就可以得出，我的第一个学习阶段是记忆单词，提升自己的词汇量。<br>而对于记忆单词，又有记忆单词的方法(比如谐音，词根词缀，记忆单词时候阅读一些英语文章，起到复习着用这写都是记忆单词的方法)。<br>单有了一定的基础后，我就可以渐渐学习语法的基础知识了。<br>但我们学习了语法，对于语法这个子集有可以进一步展开学习。<br>即语法就由时态、语态、句型等等组成。</p><p>在整个过程，会发现我基于英文就是由词汇和语法组法的框架会逐步细化，<br>渐渐变成英语就是由词汇和语法(时态语态、句型、从句等)的框架。<br>当我们逐步去学习这个框架的子集，就等价于学习了具体每个知识点。</p><blockquote><p>Note:以上是我的学习方法，不仅仅用于考试。我日常学习新的编译语言也是使用这个方法。</p></blockquote><h1 id="备考过程"><a href="#备考过程" class="headerlink" title="备考过程"></a>备考过程</h1><p>以前不久的专生本考试为例。一共考3个科目(大学英语、高等数学、C语言)<br>虽然这个才考了213分，专业排名第3名。</p><h2 id="备考决策"><a href="#备考决策" class="headerlink" title="备考决策"></a>备考决策</h2><p>对于考试科目，肯定有自己善长，有自己薄弱的。<br>我的备考策略分为</p><h3 id="发考纲前"><a href="#发考纲前" class="headerlink" title="发考纲前"></a>发考纲前</h3><p>在这个阶段，可以学习基础知识，先把基础夯实。</p><ul><li>英语可以先记忆单词，学习语法</li><li>数学先从理解的角度记忆公式，巩固基本概念的理解</li><li>专业也要从基础学起，我的C语言，我是把一些基本概念复习了一遍<blockquote><p>Note: 这个阶段，可以看一些视频教程。如果看资料难以写理解的话。</p></blockquote><h3 id="发考纲后"><a href="#发考纲后" class="headerlink" title="发考纲后"></a>发考纲后</h3>考纲一般是在考前两个月发(湖南省是这样，一般学校老师会说)<br>在这个阶段就要系统的刷题了。无论是自己善长的还是薄弱的都要去系统的刷一些题目。<br>刷题就是看病，检查有病就要治疗。<br>不要盲目的刷题，当检查错题时分析自己写错的原因。<h3 id="考前1个月了"><a href="#考前1个月了" class="headerlink" title="考前1个月了"></a>考前1个月了</h3>有些科目还是没有入门，那就减少该科的学习时间。<br>我就在考前2两个星期基本上看英语的时间很少(尽管有人跟我说英语很拉分，当我并没有花大量时间)，<br>重点都在数学和专业知识点的梳理上啦。<br>考前一个月，就是做一些基本题目。和看以前写过的习题。然后，总结自己不清晰的知识点。</li></ul><h2 id="考纲分析"><a href="#考纲分析" class="headerlink" title="考纲分析"></a>考纲分析</h2><p>学校发布考纲后，一定要认证阅读考纲。<br>可以重考纲中，去分析哪些知识是自己不会的。<br>重点看考纲的 “识记”、“了解”、“掌握”、“应用”这写关键字。<br>还有整体知识点的占比。比重大的必然考的多，基础的也考得多。</p><blockquote><p>Note: 考纲结合复习资料，在目录标志自己没有掌握的知识点</p></blockquote><h2 id="难题分析"><a href="#难题分析" class="headerlink" title="难题分析"></a>难题分析</h2><p>在练习过程，往往会有一些题目困住自己。<br>这个时候，我们需要分析自己是由于什么样的原因，而不能解答。</p><h3 id="知识遗漏"><a href="#知识遗漏" class="headerlink" title="知识遗漏"></a>知识遗漏</h3><p>对于这类题目，需要去查阅知识点才能解答。<br>那么需要把这个知识，自己去识记下来。<br>我是拿了一个小本子记录📑。</p><h3 id="粗心大意"><a href="#粗心大意" class="headerlink" title="粗心大意"></a>粗心大意</h3><p>这类题目，往往是自己马虎，对于题目的知识点都掌握啦。<br>或者题目在玩文字游戏。<br>这个类问题，往往和人有关。有些人重小就仔细。<br>我就是一个马虎的人，我是在写题目的时候，保持注意力集中和环境安静(把电子设备都关了)。<br>做题目的时候，不去想别的事情</p><h3 id="思维困难"><a href="#思维困难" class="headerlink" title="思维困难"></a>思维困难</h3><p>这种题目，就是咋都想不到，解题的方法。<br>我有一次，在计算极限的时候，就没有想到需要对(1 - a^3) 进行展开，再化简。<br>这个问题，我也会记录在小本子上📑。下次做题的时候，就会试着向这个方向思考。<br>对于思维困难，必须要多做题目才行。</p><h1 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h1><p>备考一定明确，考试范围。</p><p>备考要制定自己的计划，复习的整体计划。每日计划也可以制定(我没有制定，我一般只有整体计划)</p><p>考前，要梳理知识点。不要在意别人过多的决定和眼光(备考心态也要注意)</p><p>有了目标、计划就去完成。大家加油🤞🤞</p><blockquote><p>要搞清楚自己人生的剧本——不是你父母的续集，不是你子女的前传，更不是你朋友的外篇。<br>                                         –尼采</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;考试也结束啦，结果还不错🤪。&lt;br&gt;下面我就记录分享一下，我以往的学习方式及备考过程。&lt;/p&gt;</summary>
    
    
    
    <category term="日常" scheme="http://yoursite.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="学习方法" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
    <category term="备考方法" scheme="http://yoursite.com/tags/%E5%A4%87%E8%80%83%E6%96%B9%E6%B3%95/"/>
    
    <category term="自学方法" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AD%A6%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python之基本数据类型</title>
    <link href="http://yoursite.com/2020/07/27/Python%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/07/27/Python%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-07-27T08:35:49.000Z</published>
    <updated>2020-10-26T14:32:52.905Z</updated>
    
    <content type="html"><![CDATA[<p>我回来啦！！　回到我的家乡🎊<br>今天拿到啦毕业证书，没想到里面还有一张优秀毕业设计证书🤣<br>可是好简陋，我一脸嫌弃😏</p><a id="more"></a><p>闲言少叙，下面就开写进入Python的世界吧～～～🐍</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串英文 string ，是 python 中随处可见的数据类型。</p><p>字符串的识别也非常的简单，就是用「引号」括起来的<br>引号包括单引号 ‘ ‘ ，双引号 “ “ 和 三引号 ‘’’ ‘’’ ，比如 ‘abc’ ，”123” 等等。</p><h5 id="Note-为啥有这么多引号呢？-一个不行吗？🤔"><a href="#Note-为啥有这么多引号呢？-一个不行吗？🤔" class="headerlink" title="Note: 为啥有这么多引号呢？　一个不行吗？🤔"></a>Note: 为啥有这么多引号呢？　一个不行吗？🤔</h5><p>原因其实很简单</p><ul><li>单引号： 引用的字符串中不能有单引号「·用双引号」</li><li>双引号： 引用的字符串中不能有双引号「·用三引号」</li></ul><p>其实这里可以直接转义字符<br>比如单引号，你可以使用 \‘ 来表示，双引号可以使用 \“ 来表示。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Hello Python'</span>)</span><br><span class="line">print(<span class="string">"Hllo 'Python'"</span>)</span><br><span class="line">print(<span class="string">'''Hello "Python"'''</span>)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello Python</span><br><span class="line">Hllo <span class="string">'Python'</span></span><br><span class="line">Hello <span class="string">"Python"</span></span><br></pre></td></tr></table></figure><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><p>整数英文为 integer 。<br>这里不多说,和C非常相似。我们直接看代码🤪</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int1  = <span class="number">1</span></span><br><span class="line">int2 = <span class="number">100</span></span><br><span class="line">int3 = <span class="number">-100</span></span><br><span class="line">int4 = <span class="number">1</span> / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(int1)</span><br><span class="line">print(int2)</span><br><span class="line">print(int3)</span><br><span class="line">print(int4)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">100</span><br><span class="line">-100</span><br><span class="line">0.5</span><br></pre></td></tr></table></figure><h5 id="Note：-1／２-会得到０-5-int4会自动提升为float类型。-１-2-才会得到０"><a href="#Note：-1／２-会得到０-5-int4会自动提升为float类型。-１-2-才会得到０" class="headerlink" title="Note：　1／２　会得到０.5 int4会自动提升为float类型。　１//2 才会得到０"></a>Note：　1／２　会得到０.5 int4会自动提升为float类型。　１//2 才会得到０</h5><h2 id="Python运算符"><a href="#Python运算符" class="headerlink" title="Python运算符"></a>Python运算符</h2><p>＋ 、- 、* 我就不列举啦，太简单和日常一样</p><table><thead><tr><th align="left">运算符</th><th align="left">表示</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">／</td><td align="left">除</td><td align="left">１／２　输出结果０.５</td></tr><tr><td align="left">％</td><td align="left">取模</td><td align="left">5%2 输出结果１</td></tr><tr><td align="left">**</td><td align="left">幂</td><td align="left">2**3 为２的３次方</td></tr><tr><td align="left">//</td><td align="left">取整</td><td align="left">11//2 输出结果　５</td></tr></tbody></table><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>浮点数的英文名是 float ，是指带小数的数字。<br>对浮点数的表达本身是不精确的。保存在计算机中的是二进制数，二进制对有些数字不能准确表达，只能非常接近这个数。</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">0.55</span>+<span class="number">0.41</span>)</span><br><span class="line">print(<span class="number">0.55</span>+<span class="number">0.4</span>)</span><br><span class="line">print(<span class="number">0.55</span>+<span class="number">0.411</span>)</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0.96</span><br><span class="line">0.9500000000000001</span><br><span class="line">0.9610000000000001</span><br></pre></td></tr></table></figure><p>#####Note: 浮点数不能准确表达，对浮点数做运算和比较大小的时候要小心。</p><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>一个布尔值只有True、False两种值「注意大写开头」🤫<br>布尔值可以用and、or、not运算。</p><ul><li><p>and 运算是与运算，只有所有都为 True，and 运算结果才是 True。</p></li><li><p>or 运算是或运算，只要其中有一个为 True，or 运算结果就是 True。</p></li><li><p>not 运算是非运算，它是一个单目运算符，把 True 变成 False，False 变成 True。</p></li></ul><p>这里很多语言都是一致的🤫,其实就是布尔代数🙃</p><h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p>Python 使用Node「开头大写」来表示</p><h2 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h2><blockquote><p>我们都知道计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），0 - 255被用来表示大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母 A 的编码是 65，小写字母 z 的编码是 122。      </p><p>如果要表示中文，显然一个字节是不够的，至少需要两个字节，而且还不能和 ASCII 编码冲突，所以，中国制定了 GB2312 编码，用来把中文编进去。类似的，日文和韩文等其他语言也有这个问题。为了统一所有文字的编码，Unicode 应运而生。</p><p>Unicode 把所有语言都统一到一套编码里，这样就不会再有乱码问题了。Unicode 通常用两个字节表示一个字符，原有的英文编码从单字节变成双字节，只需要把高字节全部填为 0 就可以。</p><p>因为 Python 的诞生比 Unicode 标准发布的时间还要早，所以最早的Python 只支持 ASCII 编码，普通的字符串 ‘ABC’ 在 Python 内部都是 ASCII 编码的。&gt;Python 在后来添加了对 Unicode 的支持，以 Unicode 表示的字符串用u’…’表示。不过在最新的 Python 3 版本中，字符串是以 Unicode 编码的，也就是说，Python 的字符串支持多语言。就像上面的例子一样，我的代码中没有加u’…’，也能正常显示。</p><p>不过由于 Python 源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为 UTF-8 编码。当Python 解释器读取源代码时，为了让它按 UTF-8 编码读取，我们通常在文件开头写上这两行：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3 </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><blockquote><p>第一行注释是为了告诉 Linux/OS X 系统，这是一个 Python 可执行程序，Windows 系统会忽略这个注释；第二行注释是为了告诉 Python 解释器，按照 UTF-8 编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。</p><p>申明了 UTF-8 编码并不意味着你的 .py 文件就是 UTF-8 编码的，必须并且要确保文本编辑器正在使用 UTF-8 without BOM 编码</p></blockquote><p>今天就先到这里吧～～ </p><p>加油，加油🧑‍🔬</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我回来啦！！　回到我的家乡🎊&lt;br&gt;今天拿到啦毕业证书，没想到里面还有一张优秀毕业设计证书🤣&lt;br&gt;可是好简陋，我一脸嫌弃😏&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
    <category term="编程语言" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="脚本" scheme="http://yoursite.com/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Linux使用QQ与微信</title>
    <link href="http://yoursite.com/2020/07/21/%E4%BD%BF%E7%94%A8QQ%E4%B8%8E%E5%BE%AE%E4%BF%A1/"/>
    <id>http://yoursite.com/2020/07/21/%E4%BD%BF%E7%94%A8QQ%E4%B8%8E%E5%BE%AE%E4%BF%A1/</id>
    <published>2020-07-21T07:41:41.000Z</published>
    <updated>2020-10-26T14:33:09.382Z</updated>
    
    <content type="html"><![CDATA[<p>对于一般Linux用户，QQ，微信。是经常需要使用的东西。🙃<br>不过对于我这种，神一般的Linux用户而言。QQ啥的就不是很需要啦。🤣<br>“有事给我发电子邮件”，这是我常说的。</p><a id="more"></a><p>QQ的确用的很少，但还是要记录一下QQ、微信安装和配置的！！</p><h2 id="QQ-for-Linux"><a href="#QQ-for-Linux" class="headerlink" title="QQ for Linux"></a>QQ for Linux</h2><p>这是首选Linux 下面的QQ解决方案。<br>这个东西，在愚人节过后更新啦，我也是很佩服。但是依旧是秦始皇年代的界面风格🤪<br>这个QQ毕竟可以流畅的使用，虽然有时崩溃。<br><img src="/img/linux11.jpg" alt="QQ for Linux"><br>###　安装<br>安装方式都是很简单，官方都有。<br>如果Arch ,Manjaro 就使用下面这条命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S qq-linux</span><br></pre></td></tr></table></figure><p><a href="https://im.qq.com/linuxqq/index.html" target="_blank" rel="noopener">https://im.qq.com/linuxqq/index.html</a></p><h2 id="Deepin-QQ与Deepin-Wechat"><a href="#Deepin-QQ与Deepin-Wechat" class="headerlink" title="Deepin-QQ与Deepin-Wechat"></a>Deepin-QQ与Deepin-Wechat</h2><p>需要完整的QQ、Wechat体验，可以安装Deepin应用，在Manjaro中，由于有AUR源、Archlinuxcn源的加持，安装过程是非常方便的。<br>安装微信，只需在AUR中找到并安装deepin-wine-wechat；安装QQ，只需在AUR中找到并安装deepin-wine-tim或者deepin-wine-qq即可。<br>安装软件包后，打开软件，按照提示完成进一步的安装配置之后就可使用。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="TIM"><a href="#TIM" class="headerlink" title="TIM"></a>TIM</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S deepin-wine-tim</span><br></pre></td></tr></table></figure><h4 id="QQ"><a href="#QQ" class="headerlink" title="QQ"></a>QQ</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S deepin-wine-qq</span><br></pre></td></tr></table></figure><h4 id="wechat"><a href="#wechat" class="headerlink" title="wechat"></a>wechat</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S deepin-wine-wechat</span><br></pre></td></tr></table></figure><h3 id="DPI"><a href="#DPI" class="headerlink" title="DPI"></a>DPI</h3><p>安装完成后，会发现字体比较小，使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WINEPREFIX=~/.deepinwine/Deepin-QQ deepin-wine winecfg <span class="comment">#修改QQ的DPI</span></span><br><span class="line">WINEPREFIX=~/.deepinwine/Deepin-TIM deepin-wine winecfg <span class="comment">#修改TIM的DPI</span></span><br></pre></td></tr></table></figure><p>则可以调整DPI了<br><img src="/img/dpi.jpg" alt="DPI调整"><br>对于微信，可以使用网页版，也可以去Github下载高手封装好了的网页版微信，就不用打开浏览器登入微信啦</p><h3 id="无法显示图片"><a href="#无法显示图片" class="headerlink" title="无法显示图片"></a>无法显示图片</h3><p>聊天图片与头像无法显示，或者始终处于加载中，是因为QQ的图片解析与ipv6不兼容，需要关闭ipv6。<br>在终端使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1</span><br><span class="line">sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1</span><br><span class="line">sudo sysctl -w net.ipv6.conf.lo.disable_ipv6=1</span><br></pre></td></tr></table></figure><h6 id="Note：以上命令在深度Deepin-Linux系统下有效，其他Linux发行版可参考。我也没测试。我的安装好就能用🤣"><a href="#Note：以上命令在深度Deepin-Linux系统下有效，其他Linux发行版可参考。我也没测试。我的安装好就能用🤣" class="headerlink" title="Note：以上命令在深度Deepin Linux系统下有效，其他Linux发行版可参考。我也没测试。我的安装好就能用🤣"></a>Note：以上命令在深度Deepin Linux系统下有效，其他Linux发行版可参考。我也没测试。我的安装好就能用🤣</h6>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于一般Linux用户，QQ，微信。是经常需要使用的东西。🙃&lt;br&gt;不过对于我这种，神一般的Linux用户而言。QQ啥的就不是很需要啦。🤣&lt;br&gt;“有事给我发电子邮件”，这是我常说的。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux之路" scheme="http://yoursite.com/categories/Linux%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="Arch" scheme="http://yoursite.com/tags/Arch/"/>
    
    <category term="Manjaro" scheme="http://yoursite.com/tags/Manjaro/"/>
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Shell之函数</title>
    <link href="http://yoursite.com/2020/07/20/Shell%E4%B9%8B%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2020/07/20/Shell%E4%B9%8B%E5%87%BD%E6%95%B0/</id>
    <published>2020-07-20T07:34:21.000Z</published>
    <updated>2020-10-26T14:33:00.612Z</updated>
    
    <content type="html"><![CDATA[<p>我已经有几天没有写博客啦，因为这几天成绩出来了。🤹🏼‍♂️<br>这我又看出来了，公布成绩的耍猴过程。<br>其实这几天，我也没有看shell脚本的知识。<br>我最近迷上啦，看纸质的书;在阅读奥古斯丁《忏悔录》</p><a id="more"></a><p>这本书真的很有意思👋，我就不多说啦！<br>这就开始吧！！！！！</p><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>Shell也支持函数，Shell函数必须定义在使用前面。<br>函数调用只需要给出函数名，不需要加入括号。<br>函数返回值，可以显式增加return语句；如果不加，会将最后一条命令运行结果作为返回值。<br>Shell 函数返回值只能是整数</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">function_name</span></span> () &#123;</span><br><span class="line">    list of commands</span><br><span class="line">    [ <span class="built_in">return</span> value ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>function 为可选关键字</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果很显然，我就不多说啦🤣</p><h2 id="返回字符串"><a href="#返回字符串" class="headerlink" title="返回字符串"></a>返回字符串</h2><p>如果一定要让函数返回字符串，那么可以先定义一个变量，用来接收函数的计算结果。<br>脚本在需要的时候访问这个变量来获得函数返回值。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line">str=hello</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span></span><br></pre></td></tr></table></figure><p>这样就可以返回字符串啦🤔🤔🤔</p><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>Shell 调用函数时可以向其传递参数，在函数内部，通过$n的形式获取参数</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">sum</span></span>()&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="variable">$#</span> <span class="keyword">in</span></span><br><span class="line">                0) <span class="built_in">echo</span> <span class="string">"no param"</span>;;</span><br><span class="line">                1) <span class="built_in">echo</span> <span class="string">"1 param"</span>;;</span><br><span class="line">                2) <span class="built_in">echo</span> <span class="string">"2 param"</span>;;</span><br><span class="line">                3) <span class="built_in">echo</span> <span class="string">"3 param"</span>;;</span><br><span class="line">                *) <span class="built_in">echo</span> <span class="string">"<span class="variable">$#</span> params!!"</span>;;</span><br><span class="line">        <span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum 1 2 3 4</span><br></pre></td></tr></table></figure><h3 id="变量说明"><a href="#变量说明" class="headerlink" title="变量说明"></a>变量说明</h3><table><thead><tr><th align="left">特殊变量</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">$#</td><td align="left">传递给函数的参数个数</td></tr><tr><td align="left">$*</td><td align="left">显示所有传递给函数的参数</td></tr><tr><td align="left">$@</td><td align="left">与$*相同，但是略有区别，请查看Shell特殊变量</td></tr><tr><td align="left">$?</td><td align="left">函数的返回值</td></tr></tbody></table><h2 id="获取函数返回值"><a href="#获取函数返回值" class="headerlink" title="获取函数返回值"></a>获取函数返回值</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">sum</span></span>()&#123;</span><br><span class="line">        <span class="built_in">echo</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(sum)</span><br></pre></td></tr></table></figure><p>这就可以获取到函数的返回值啦，是不是非常Amagzing🧖🏻</p><p>shell脚本结合Linux一些命名，在使用过程中是非常便捷的。<br>如果需要批连创建文件，或者进行软件的编译安装。<br>都可以通过shell脚本进行操作。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我已经有几天没有写博客啦，因为这几天成绩出来了。🤹🏼‍♂️&lt;br&gt;这我又看出来了，公布成绩的耍猴过程。&lt;br&gt;其实这几天，我也没有看shell脚本的知识。&lt;br&gt;我最近迷上啦，看纸质的书;在阅读奥古斯丁《忏悔录》&lt;/p&gt;</summary>
    
    
    
    <category term="脚本" scheme="http://yoursite.com/categories/%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="Arch" scheme="http://yoursite.com/tags/Arch/"/>
    
    <category term="Manjaro" scheme="http://yoursite.com/tags/Manjaro/"/>
    
    <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell之语句</title>
    <link href="http://yoursite.com/2020/07/16/Shell%E8%84%9A%E6%9C%AC%E4%B9%8B%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2020/07/16/Shell%E8%84%9A%E6%9C%AC%E4%B9%8B%E8%AF%AD%E5%8F%A5/</id>
    <published>2020-07-16T08:25:46.000Z</published>
    <updated>2020-10-26T14:33:06.618Z</updated>
    
    <content type="html"><![CDATA[<p>昨天我….陪小朋友👦打球🏀去啦，就没有写🤣。<br>不过，有个人告诉我，TA看了我的博客(开心😃)<br>今天就直接开始吧</p><a id="more"></a><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ expression ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   Statement(s) to be executed <span class="keyword">if</span> expression is <span class="literal">true</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h6 id="Note-expression和方括号-之间必须有空格，否则会有语法错误。"><a href="#Note-expression和方括号-之间必须有空格，否则会有语法错误。" class="headerlink" title="Note: expression和方括号([ ])之间必须有空格，否则会有语法错误。"></a>Note: expression和方括号([ ])之间必须有空格，否则会有语法错误。</h6><h3 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h3><p>有三种形式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ... <span class="keyword">fi</span> 语句</span><br><span class="line"><span class="keyword">if</span> ... <span class="keyword">else</span> ... <span class="keyword">fi</span> 语句</span><br><span class="line"><span class="keyword">if</span> ... <span class="keyword">elif</span> ... <span class="keyword">else</span> ... <span class="keyword">fi</span> 语句</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/us/bin/sh</span></span><br><span class="line">a=10</span><br><span class="line">b=10</span><br><span class="line">c=12</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">trans -sp <span class="string">"a等于b"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> == <span class="variable">$c</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">trans -sp <span class="string">"a等于c"</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">trans -sp <span class="string">"用会Windows吧"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>示例很简单，就不多罗嗦啦🤫</p><h2 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h2><p>M为需要匹配的东西，*) 其他没有匹配则执行</p><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="variable">$var</span> <span class="keyword">in</span></span><br><span class="line">    M) Statement；;</span><br><span class="line">    M) Statement;;</span><br><span class="line">    *) Statement;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h6 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h6><ul><li>取值后面必须为关键字 in.</li><li>每一模式必须以右括号结束。</li><li>取值可以为变量或常数。</li><li>匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。;; 与其他语言中的 break 类似，意思是跳到整个 case 语句的最后。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/us/bin/sh</span></span><br><span class="line">a=10</span><br><span class="line"><span class="keyword">case</span> <span class="variable">$a</span> <span class="keyword">in</span></span><br><span class="line">    10) trans -sp <span class="string">"a等于b"</span>;;</span><br><span class="line">    12) trans -sp <span class="string">"a等于c"</span>;;</span><br><span class="line">    *) trans -sp <span class="string">"用会Windows吧"</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><h3 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> range</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    Statement1</span><br><span class="line">    Statement2</span><br><span class="line">    ...</span><br><span class="line">    StatementN</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>range 为循环范围，如果学过Python的话，这里和python很类似。🙈</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/us/bin/sh</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> 5 4 3 2 1 </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    trans -sp <span class="string">"用会Windows吧<span class="variable">$&#123;value&#125;</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><h3 id="格式-3"><a href="#格式-3" class="headerlink" title="格式"></a>格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [ expression ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   Statement(s) to be executed <span class="keyword">if</span> expression is <span class="literal">true</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/us/bin/sh</span></span><br><span class="line">c=0;</span><br><span class="line">a=0;</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$a</span> == <span class="variable">$c</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$c</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>会一直在终端输出0,小心哦🙃</p><h2 id="until-语句"><a href="#until-语句" class="headerlink" title="until 语句"></a>until 语句</h2><p>until 循环执行一系列命令直至条件为 true 时停止。until 循环与 while 循环在处理方式上刚好相反。一般while循环优于until使用。</p><h3 id="格式-4"><a href="#格式-4" class="headerlink" title="格式"></a>格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ expression ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   Statement(s) to be executed <span class="keyword">if</span> expression is <span class="literal">false</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/us/bin/sh</span></span><br><span class="line">c=0;</span><br><span class="line">a=1;</span><br><span class="line">until [ <span class="variable">$a</span> == <span class="variable">$c</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$c</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>这个东西和wile好相似哦。这个脚本也会一直在终端输出。</p><h2 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h2><p>break,continue 和c语言使用类似</p><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break 命令跳出最外层循环。🤹🏼‍♂️</p><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/us/bin/sh</span></span><br><span class="line">c=0;</span><br><span class="line">a=0;</span><br><span class="line">b=0;</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$c</span> == <span class="variable">$a</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$b</span> == <span class="variable">$a</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>在嵌套循环中，break 命令后面还可以跟一个整数，表示跳出第几层循环</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">break</span> n</span><br></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>continue 终止该次循环，继续下一次。👷</p><h4 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/us/bin/sh</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> 1 2 3 4 5</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$a</span> == 2 ]</span><br><span class="line">        <span class="keyword">then</span> </span><br><span class="line">            <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>不会输出2</p><p>～～～～～～～～～～～～The End <del>~</del></p><p>哈哈哈哈，如果我是一只企鹅🐧，我就会非常努力学习游泳，游到北极去和北极熊🐨玩耍！！！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨天我….陪小朋友👦打球🏀去啦，就没有写🤣。&lt;br&gt;不过，有个人告诉我，TA看了我的博客(开心😃)&lt;br&gt;今天就直接开始吧&lt;/p&gt;</summary>
    
    
    
    <category term="脚本" scheme="http://yoursite.com/categories/%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="Arch" scheme="http://yoursite.com/tags/Arch/"/>
    
    <category term="Manjaro" scheme="http://yoursite.com/tags/Manjaro/"/>
    
    <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell之变量</title>
    <link href="http://yoursite.com/2020/07/14/Shell%E8%84%9A%E6%9C%AC%E4%B9%8B%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2020/07/14/Shell%E8%84%9A%E6%9C%AC%E4%B9%8B%E5%8F%98%E9%87%8F/</id>
    <published>2020-07-14T02:54:18.000Z</published>
    <updated>2020-10-26T14:33:04.818Z</updated>
    
    <content type="html"><![CDATA[<p>这是Shell脚本的第一遍博客，为啥要写呢？？ ❓<br>当然，我最近在学shell脚本啦，那为啥要学呢？<br>正所谓，学习是一种人生的追求……（装不下去啦 😼）</p><a id="more"></a><p>其实学习Shell脚本，是为了简化一些需要大量重复的工作。 🙆‍♂ 闲言少叙。Let’s go！！！！</p><h2 id="什么是Shell脚本"><a href="#什么是Shell脚本" class="headerlink" title="什么是Shell脚本"></a>什么是Shell脚本</h2><p>Shell脚本（英语：Shell script），又称Shell命令稿、程序化脚本，是一种电脑程序使用的文本文件，内容由一连串的shell命令组成，经由Unix Shell直译其内容后运作。被当成是一种脚本语言来设计，其运作方式与解释型语言相当，由Unix shell扮演命令行解释器的角色，在读取shell脚本之后，依序运行其中的shell命令，之后输出结果。利用shell脚本可以进行系统管理，文件操作等。（WIkipedia 就是这么解释的 😄）</p><h3 id="Shell脚本基本内容"><a href="#Shell脚本基本内容" class="headerlink" title="Shell脚本基本内容"></a>Shell脚本基本内容</h3><p>第一行，#!开头就是自定解释器，这里使用/usr/bin/sh 做解释器。<br>其他的后面会说 💁‍♂</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/sh</span></span><br><span class="line"><span class="built_in">cd</span> ~/Desktop</span><br><span class="line"><span class="keyword">for</span> ((i=0; i&lt;100; i++)); <span class="keyword">do</span></span><br><span class="line">mkdir 换回windows吧_<span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="查看解释器"><a href="#查看解释器" class="headerlink" title="查看解释器"></a>查看解释器</h3><p>该命令可以查看系统，已经安装了那些脚本解释器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/shells</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量这个东西，是非常基础的。基础到我不想多说 :smile:</p><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><h4 id="显式直接赋值"><a href="#显式直接赋值" class="headerlink" title="显式直接赋值"></a>显式直接赋值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i=0</span><br><span class="line">str=<span class="string">"Hello J"</span></span><br></pre></td></tr></table></figure><h4 id="间接赋值"><a href="#间接赋值" class="headerlink" title="间接赋值"></a>间接赋值</h4><p>通过另一个输出，输入到变量中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls /etec` <span class="comment"># ls /etc 输出的结果，输入到变量 file中</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">##### Note: 变量名和等号之间不能有空格,单个#开头是注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用变量</span></span><br><span class="line">这就很简单啦 😸</span><br><span class="line">在变量面前加一个美元符号就可以。果然只要给钱啥都简单～～～</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```Bash</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$file</span> <span class="comment"># echo 输出语句</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;file&#125;</span> <span class="comment"># 等价上面，花括号可选</span></span><br></pre></td></tr></table></figure><h5 id="Note-花括号是为了标定变量边界"><a href="#Note-花括号是为了标定变量边界" class="headerlink" title="Note: 花括号是为了标定变量边界"></a>Note: 花括号是为了标定变量边界</h5><h3 id="重定义变量"><a href="#重定义变量" class="headerlink" title="重定义变量"></a>重定义变量</h3><p>这就有点，不符合我以往的编程经验啦～<br>已定义的变量，可以被重新定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i=0</span><br><span class="line"><span class="built_in">echo</span> &amp;i</span><br><span class="line"></span><br><span class="line">i=12</span><br><span class="line"><span class="built_in">echo</span> &amp;i</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>这个东西经常用到 😼，可以使用单引号或双引号</p><h4 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">'i am j'</span></span><br></pre></td></tr></table></figure><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</li><li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）</li></ul><h4 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">j&#x3D;1</span><br><span class="line">string&#x3D;&quot;I am Janking \&quot;$j&quot;! \n&quot;</span><br></pre></td></tr></table></figure><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h4 id="获取长度"><a href="#获取长度" class="headerlink" title="获取长度"></a>获取长度</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"abcdef"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#输出 6</span></span><br></pre></td></tr></table></figure><h4 id="提取子串"><a href="#提取子串" class="headerlink" title="提取子串"></a>提取子串</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"linux is a great OS"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:0:4&#125;</span> <span class="comment">#输出：linux</span></span><br></pre></td></tr></table></figure><p>今天就到这里吧，finger crossed!!  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是Shell脚本的第一遍博客，为啥要写呢？？ ❓&lt;br&gt;当然，我最近在学shell脚本啦，那为啥要学呢？&lt;br&gt;正所谓，学习是一种人生的追求……（装不下去啦 😼）&lt;/p&gt;</summary>
    
    
    
    <category term="脚本" scheme="http://yoursite.com/categories/%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="Arch" scheme="http://yoursite.com/tags/Arch/"/>
    
    <category term="Manjaro" scheme="http://yoursite.com/tags/Manjaro/"/>
    
    <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>初次遇见，Howdy</title>
    <link href="http://yoursite.com/2020/07/11/%E5%88%9D%E6%AC%A1%E9%81%87%E8%A7%81%EF%BC%8CHowdy/"/>
    <id>http://yoursite.com/2020/07/11/%E5%88%9D%E6%AC%A1%E9%81%87%E8%A7%81%EF%BC%8CHowdy/</id>
    <published>2020-07-11T04:09:52.000Z</published>
    <updated>2020-10-26T14:33:11.452Z</updated>
    
    <content type="html"><![CDATA[<p>自从上次双11，剁手买来Lenovo 小新 Pro 13 电脑后，我就天天想着安装Arch Linux系统 😄，可以是刚好临近毕业。毕业文档要用word写，我也很无奈，毕竟Linux 中对word支持不是很好 👎。</p><a id="more"></a><p>就在前不久，我入手啦Arch的儿子。就是Manjaro(基于arch开发)，我终于体会到啦，安装系统过程的简便性。(好评 👍 👍)。但是我的Windows Hello功能就废了。</p><p><img src="/img/manjaro.jpg" alt="系统截图"></p><h2 id="初识Howdy"><a href="#初识Howdy" class="headerlink" title="初识Howdy"></a>初识Howdy</h2><p>不久就我逛Github的时候就发现这个仓库，这就令我非常Amazing呀。<br>对于Arch 派，一条命令就能安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S howdy</span><br></pre></td></tr></table></figure><p>arch派就是这么简单，欢迎加入 🇯🇴<br>不过重点不在这里，因为国内网络的问题(我也不想多说，懂的自然懂 ☕️)<br>下载一个包特别慢，我就尝试啦proxychains。结果yay不支持 😢</p><h2 id="YAY-重造"><a href="#YAY-重造" class="headerlink" title="YAY 重造"></a>YAY 重造</h2><p>查了老半天发现，需要重新编译yay才行。下面直接开干吧！ 👷</p><h3 id="安装gcc-go"><a href="#安装gcc-go" class="headerlink" title="安装gcc-go"></a>安装gcc-go</h3><p>需要使用gcc-go 重新编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S gcc-go</span><br></pre></td></tr></table></figure><h3 id="克隆yay源码并编译"><a href="#克隆yay源码并编译" class="headerlink" title="克隆yay源码并编译"></a>克隆yay源码并编译</h3><p>这里就使用git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure><h3 id="克隆proxychains-ng-并编译"><a href="#克隆proxychains-ng-并编译" class="headerlink" title="克隆proxychains-ng 并编译"></a>克隆proxychains-ng 并编译</h3><p>最后一条命令可以不执行，懂得都懂 😏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rofl0r/proxychains-ng.git</span><br><span class="line"><span class="built_in">cd</span> proxychains-ng</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">cp ./src/proxychains.conf /etc/proxychains.conf</span><br><span class="line"><span class="built_in">cd</span> .. &amp;&amp; rm -rf proxychains-ng</span><br></pre></td></tr></table></figure><h3 id="配置proxychains"><a href="#配置proxychains" class="headerlink" title="配置proxychains"></a>配置proxychains</h3><p>路径为/etc/proxychains.conf<br>使用vim修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/proxychains.conf</span><br></pre></td></tr></table></figure><p>将</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socks4 127.0.0.1 9095</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socks5 127.0.0.1 1080</span><br></pre></td></tr></table></figure><p>端口有可能有差异，与代理软件设定的端口一致就可以。<br>到这里yay就重新编译完成啦。</p><h2 id="Howdy安装"><a href="#Howdy安装" class="headerlink" title="Howdy安装"></a>Howdy安装</h2><p>在需要使用代理的命令上加上 proxychains4</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 yay -S howdy</span><br></pre></td></tr></table></figure><p>到这里就结束啦，howdy的具体配置在Arch wiki都有。而且非常的详细，我就不多说啦！！！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自从上次双11，剁手买来Lenovo 小新 Pro 13 电脑后，我就天天想着安装Arch Linux系统 😄，可以是刚好临近毕业。毕业文档要用word写，我也很无奈，毕竟Linux 中对word支持不是很好 👎。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux之路" scheme="http://yoursite.com/categories/Linux%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="Arch" scheme="http://yoursite.com/tags/Arch/"/>
    
    <category term="Manjaro" scheme="http://yoursite.com/tags/Manjaro/"/>
    
    <category term="代理" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86/"/>
    
    <category term="人脸识别" scheme="http://yoursite.com/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>测试排序性能</title>
    <link href="http://yoursite.com/2020/07/10/%E6%8E%92%E5%BA%8F%E8%BE%85%E5%8A%A9/"/>
    <id>http://yoursite.com/2020/07/10/%E6%8E%92%E5%BA%8F%E8%BE%85%E5%8A%A9/</id>
    <published>2020-07-10T08:58:06.000Z</published>
    <updated>2020-10-26T14:33:16.282Z</updated>
    
    <content type="html"><![CDATA[<p>今天尝试了VScode中Code Runner插件，尽然可以多文件运行。</p><a id="more"></a><p>以前我都一直觉得需要cmake才行，只不过Code Runner这个需要main.cpp文件中点击运行才行，<br>如果是在头文件点击运行，会把头文件直接进行编译😿。<br>于是，我就把整个排序辅助相关函数，写到了不同的文件中，采用不同的命名空间。</p><h2 id="判断是否有序"><a href="#判断是否有序" class="headerlink" title="判断是否有序"></a>判断是否有序</h2><p>代码是从小到打排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"> <span class="function"><span class="keyword">bool</span> <span class="title">isSorted</span><span class="params">(T arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">         <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>])</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>获取系统时钟，计算排序的耗时长短，单位为秒。<br>采用啦assert函数，进行中断，有些编译器需要包含<cassert>头文件。P<br>不过，编写的时候也没有包含，不过编译提示我啦。Linux 好评👍</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testSort</span><span class="params">(<span class="built_in">string</span> sortName, <span class="keyword">void</span> (*sort)(T[], <span class="keyword">int</span>), T arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> startTime = clock();</span><br><span class="line">    sort(arr, n);</span><br><span class="line">    <span class="keyword">clock_t</span> endTime = clock();</span><br><span class="line">    assert(isSorted(arr, n));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sortName &lt;&lt; <span class="string">":"</span></span><br><span class="line">         &lt;&lt; <span class="keyword">double</span>(endTime - startTime) / CLOCKS_PER_SEC</span><br><span class="line">         &lt;&lt; <span class="string">" S"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序辅助空间"><a href="#排序辅助空间" class="headerlink" title="排序辅助空间"></a>排序辅助空间</h2><p>在头文件中实现，并创建啦SortTestHelper命名空间。<br>在main函数中变可以直接调用。<br>对于过多的实现，不推荐把实现代码写在头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SORTTESTHELPER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SORTTESTHELPER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> SortTestHelper</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> *<span class="title">generateRandomArray</span><span class="params">(<span class="keyword">int</span> rangeL, <span class="keyword">int</span> rangeR, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> *arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        srand(time(<span class="literal">NULL</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[i] = rand() % (rangeR - rangeL) + rangeL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(T arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSorted</span><span class="params">(T arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSort</span><span class="params">(<span class="built_in">string</span> sortName, <span class="keyword">void</span> (*sort)(T[], <span class="keyword">int</span>), T arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">clock_t</span> startTime = clock();</span><br><span class="line">        sort(arr, n);</span><br><span class="line">        <span class="keyword">clock_t</span> endTime = clock();</span><br><span class="line">        assert(isSorted(arr, n));</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sortName &lt;&lt; <span class="string">":"</span></span><br><span class="line">             &lt;&lt; <span class="keyword">double</span>(endTime - startTime) / CLOCKS_PER_SEC</span><br><span class="line">             &lt;&lt; <span class="string">" S"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// namespace SortTestHelper</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="排序空间"><a href="#排序空间" class="headerlink" title="排序空间"></a>排序空间</h2><p>也写在啦头文件中 😄,采用的是Sort这个命名空间。<br>后期所有的排序算法都写在这个命名空间下面。 👍（自我安慰一下 🍮）<br>第一算法是选择排序，时间复杂度是O(n^2)<br>整个排序思维比较简单，我就不多说了 🦎 🦎</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SORT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SORT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> Sort</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> minIndex = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[minIndex])</span><br><span class="line">                    minIndex = j;</span><br><span class="line">            swap(arr[i], arr[minIndex]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// namespace Sort</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>🤽‍♀ 到啦这里是不是amazing丫<br>调用就是如此简单，<br>不太推荐使用using namespace std;(我还是这么写啦 😄)<br>这种方式声明命名空间，会污染命名空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SortTestHelper.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Sort.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> *arr = SortTestHelper::generateRandomArray(<span class="number">1</span>,n,n);</span><br><span class="line">    SortTestHelper::testSort(<span class="string">"Selection sort"</span>,Sort::selectionSort,arr,n);</span><br><span class="line">    SortTestHelper::printArray(arr,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天尝试了VScode中Code Runner插件，尽然可以多文件运行。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>生成随机数组</title>
    <link href="http://yoursite.com/2020/07/09/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2020/07/09/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84/</id>
    <published>2020-07-09T13:50:06.000Z</published>
    <updated>2020-10-26T14:33:20.102Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有写代码，最近这几天把Blog迁移完成啦！！<br>也从Windows切换到了Manjaro</p><a id="more"></a><p>今后几天打算重温一下以前的算法，自从上次程序设计大赛后。感觉自己也没认真学习过多的算法啦。<br>今天就开个头吧，在不温习一下C++,就忘的差不多了！！！</p><h2 id="生成指定范围的随机数"><a href="#生成指定范围的随机数" class="headerlink" title="生成指定范围的随机数"></a>生成指定范围的随机数</h2><p>在有些编译器中，需要加入头文件ctime就可以调用time()函数,</p><h5 id="Note-需要注意rangeL，和rangeR的范围"><a href="#Note-需要注意rangeL，和rangeR的范围" class="headerlink" title="Note: 需要注意rangeL，和rangeR的范围"></a>Note: 需要注意rangeL，和rangeR的范围</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">generateRandomArray</span><span class="params">(<span class="keyword">int</span> rangeL,<span class="keyword">int</span> rangeR,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        arr[i] = rand() % (rangeR - rangeL ) + rangeL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="采用模板函数进行打印"><a href="#采用模板函数进行打印" class="headerlink" title="采用模板函数进行打印"></a>采用模板函数进行打印</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(T arr[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随机数的生成，主要是用于排序过程中生成模拟数据。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久没有写代码，最近这几天把Blog迁移完成啦！！&lt;br&gt;也从Windows切换到了Manjaro&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
